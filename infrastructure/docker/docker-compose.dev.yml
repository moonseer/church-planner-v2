version: '3.8'

# Development environment configuration
# This extends the base docker-compose.yml

services:
  # API Gateway
  api-gateway:
    build:
      context: ../../services/api-gateway
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
      - PORT=8000
      - SERVICE_NAME=api-gateway
      - API_PREFIX=/api/v1
      # Service URLs
      - AUTH_SERVICE_URL=http://auth-service:3001
      - CHURCH_SERVICE_URL=http://church-service:3002
      - MEMBER_SERVICE_URL=http://member-service:3003
      - EVENT_SERVICE_URL=http://events-service:3004
      # JWT configuration
      - JWT_SECRET=dev_jwt_secret
      - JWT_EXPIRES_IN=1d
      - JWT_AUDIENCE=church-planner-api
      - JWT_ISSUER=church-planner
      # Redis configuration
      - REDIS_URL=redis://redis:6379
      - REDIS_CACHE_TTL=3600
      # CORS configuration
      - CORS_ORIGIN=http://localhost:3000,http://localhost:8080
      # Rate limiting
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX=100
      # Logging
      - LOG_LEVEL=debug
      # Timeouts
      - PROXY_TIMEOUT=30000
      - SOCKET_TIMEOUT=30000
    volumes:
      - ../../services/api-gateway:/app
      - /app/node_modules
      - ../../services/api-gateway/logs:/app/logs
    networks:
      - church-planner-network
    depends_on:
      - redis
      - auth-service
      - church-service
      - member-service
      - events-service
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Service
  auth-service:
    build:
      context: ../../services/auth-service
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - MONGO_URI=mongodb://auth-db:27017/auth
      - JWT_SECRET=dev_jwt_secret
      - JWT_EXPIRE=30d
    volumes:
      - ../../services/auth-service:/app
      - /app/node_modules
    networks:
      - church-planner-network
    depends_on:
      - auth-db
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Church Service
  church-service:
    build:
      context: ../../services/church-service
      dockerfile: Dockerfile.dev
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - SERVICE_NAME=church-service
      - MONGO_URI=mongodb://church-db:27017/church
      - JWT_SECRET=dev_jwt_secret
      - JWT_AUDIENCE=church-planner-api
      - JWT_ISSUER=church-planner
      - API_GATEWAY_URL=http://api-gateway:8000
      - CORS_ORIGIN=http://localhost:3000,http://localhost:8080
      - LOG_LEVEL=debug
    volumes:
      - ../../services/church-service:/app
      - /app/node_modules
      - ../../services/church-service/logs:/app/logs
    networks:
      - church-planner-network
    depends_on:
      - church-db
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Member Service
  member-service:
    build:
      context: ../../services/member-service
      dockerfile: Dockerfile.dev
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - MONGO_URI=mongodb://member-db:27017/member
    volumes:
      - ../../services/member-service:/app
      - /app/node_modules
    networks:
      - church-planner-network
    depends_on:
      - member-db
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Events Service
  events-service:
    build:
      context: ../../services/events-service
      dockerfile: Dockerfile.dev
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
      - MONGO_URI=mongodb://events-db:27017/events
    volumes:
      - ../../services/events-service:/app
      - /app/node_modules
    networks:
      - church-planner-network
    depends_on:
      - events-db
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database services
  auth-db:
    image: mongo:latest
    volumes:
      - auth-db-data:/data/db
    networks:
      - church-planner-network
    ports:
      - "27018:27017"

  church-db:
    image: mongo:latest
    volumes:
      - church-db-data:/data/db
    networks:
      - church-planner-network
    ports:
      - "27019:27017"

  member-db:
    image: mongo:latest
    volumes:
      - member-db-data:/data/db
    networks:
      - church-planner-network
    ports:
      - "27020:27017"

  events-db:
    image: mongo:latest
    volumes:
      - events-db-data:/data/db
    networks:
      - church-planner-network
    ports:
      - "27021:27017"

  # Redis for caching
  redis:
    image: redis:alpine
    volumes:
      - redis-data:/data
    networks:
      - church-planner-network
    ports:
      - "6379:6379"

  # RabbitMQ for message queue
  rabbitmq:
    image: rabbitmq:3-management
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - church-planner-network
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=church_planner
      - RABBITMQ_DEFAULT_PASS=church_planner_dev

networks:
  church-planner-network:
    external: true

volumes:
  auth-db-data:
  church-db-data:
  member-db-data:
  events-db-data:
  redis-data:
  rabbitmq-data: 