import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
    '@typescript-eslint/no-explicit-any': "error",
    '@typescript-eslint/explicit-function-return-type': ["warn",{"allowExpressions":true}],
    '@typescript-eslint/explicit-module-boundary-types': "warn",
    '@typescript-eslint/no-unused-vars': ["error",{"argsIgnorePattern":"^_"}],
    '@typescript-eslint/no-non-null-assertion': "warn",
    '@typescript-eslint/no-inferrable-type-args': "warn",
    '@typescript-eslint/ban-types': "warn",
    '@typescript-eslint/no-namespace': "warn",
    '@typescript-eslint/no-var-requires': "warn",
    '@typescript-eslint/no-array-constructor': "warn",
    '@typescript-eslint/no-extra-non-null-assertion': "error",
    '@typescript-eslint/no-floating-promises': "warn",
    '@typescript-eslint/no-this-alias': "warn",
    '@typescript-eslint/no-unnecessary-type-assertion': "warn",
    '@typescript-eslint/prefer-nullish-coalescing': "warn",
    '@typescript-eslint/prefer-optional-chain': "warn",
    '@typescript-eslint/prefer-as-const': "warn",
    '@typescript-eslint/prefer-for-of': "warn",
    '@typescript-eslint/prefer-enum-initializers': "warn",
    '@typescript-eslint/prefer-literal-enum-member': "warn",
    '@typescript-eslint/prefer-string-starts-ends-with': "warn",
    '@typescript-eslint/prefer-includes': "warn",
    '@typescript-eslint/prefer-readonly': "warn",
    '@typescript-eslint/prefer-ts-expect-error': "warn",
    '@typescript-eslint/unified-signatures': "warn",
    '@typescript-eslint/consistent-type-assertions': "warn",
    '@typescript-eslint/consistent-type-definitions': ["warn","interface"],
    '@typescript-eslint/consistent-type-imports': ["warn",{"prefer":"type-imports"}],
    '@typescript-eslint/consistent-indexed-object-style': ["warn","record"],
    '@typescript-eslint/explicit-member-accessibility': ["warn",{"accessibility":"explicit"}],
    '@typescript-eslint/naming-convention': ["warn",{"selector":"interface","format":["PascalCase"],"prefix":["I"]},{"selector":"typeAlias","format":["PascalCase"]},{"selector":"enum","format":["PascalCase"]},{"selector":"enumMember","format":["UPPER_CASE"]},{"selector":"memberLike","modifiers":["private"],"format":["camelCase"],"leadingUnderscore":"require"},{"selector":"typeParameter","format":["PascalCase"],"prefix":["T"]}],
    '@typescript-eslint/no-unsafe-assignment': "warn",
    '@typescript-eslint/no-unsafe-member-access': "warn",
    '@typescript-eslint/no-unsafe-call': "warn",
    '@typescript-eslint/no-unsafe-return': "warn",
    '@typescript-eslint/restrict-plus-operands': "warn",
    '@typescript-eslint/restrict-template-expressions': "warn",
    '@typescript-eslint/await-thenable': "warn",
    '@typescript-eslint/require-await': "warn",
    '@typescript-eslint/no-misused-promises': "warn",
    '@typescript-eslint/no-for-in-array': "error",
    '@typescript-eslint/method-signature-style': ["warn","property"],
    '@typescript-eslint/member-ordering': "warn",
    '@typescript-eslint/array-type': ["warn",{"default":"array"}],
    '@typescript-eslint/ban-tslint-comment': "warn",
    '@typescript-eslint/class-literal-property-style': ["warn","fields"],
    '@typescript-eslint/consistent-generic-constructors': ["warn","type-annotation"],
    '@typescript-eslint/no-confusing-non-null-assertion': "warn",
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
