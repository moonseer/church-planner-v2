openapi: 3.0.3
info:
  title: Church Planner API
  description: API for managing church resources, events, teams, and services
  version: 1.0.0
  contact:
    name: Church Planner Support
    email: support@churchplanner.example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api
    description: Local development server
  - url: https://api.churchplanner.example.com/api
    description: Production server

tags:
  - name: Auth
    description: Authentication operations
  - name: Users
    description: User operations
  - name: Churches
    description: Church operations
  - name: Events
    description: Event operations
  - name: Teams
    description: Team operations
  - name: Services
    description: Service operations

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: Create a new user account
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Auth
      summary: Log in
      description: Authenticate a user and get a JWT token
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many failed login attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me:
    get:
      tags:
        - Users
      summary: Get current user
      description: Get the profile of the currently authenticated user
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /churches:
    get:
      tags:
        - Churches
      summary: List churches
      description: Get a list of churches the user has access to
      operationId: listChurches
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            maximum: 100
          description: Number of items per page
      responses:
        '200':
          description: List of churches
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Church'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Churches
      summary: Create church
      description: Create a new church
      operationId: createChurch
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChurchInput'
      responses:
        '201':
          description: Church created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/Church'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserRegistration:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          format: password
          minLength: 8
          example: Password123!
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        phoneNumber:
          type: string
          example: "1234567890"

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          format: password
          example: Password123!

    AuthResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: object
          properties:
            token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
            user:
              $ref: '#/components/schemas/UserProfile'

    UserProfile:
      type: object
      properties:
        id:
          type: string
          example: 5f8d0c1d8b9c2e1d8b9c2e1d
        email:
          type: string
          format: email
          example: john.doe@example.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        phoneNumber:
          type: string
          example: "1234567890"
        role:
          type: string
          enum: [user, admin]
          example: user
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Church:
      type: object
      properties:
        id:
          type: string
          example: 5f8d0c1d8b9c2e1d8b9c2e1d
        name:
          type: string
          example: First Baptist Church
        address:
          type: string
          example: 123 Main St, Anytown, USA
        phoneNumber:
          type: string
          example: "1234567890"
        email:
          type: string
          format: email
          example: info@fbcanytown.org
        website:
          type: string
          format: uri
          example: https://fbcanytown.org
        timezone:
          type: string
          example: America/New_York
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ChurchInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: First Baptist Church
        address:
          type: string
          example: 123 Main St, Anytown, USA
        phoneNumber:
          type: string
          example: "1234567890"
        email:
          type: string
          format: email
          example: info@fbcanytown.org
        website:
          type: string
          format: uri
          example: https://fbcanytown.org
        timezone:
          type: string
          example: America/New_York

    Pagination:
      type: object
      properties:
        total:
          type: integer
          example: 100
        currentPage:
          type: integer
          example: 1
        totalPages:
          type: integer
          example: 10
        limit:
          type: integer
          example: 10

    Error:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: Invalid input parameters
        code:
          type: string
          example: INVALID_INPUT 